@page "/Registrar"
@page "/Registrar/{ReturnUrl}"

@rendermode InteractiveServer
@inject SignInManager<IdentityUser> _signInManager;
@inject AutenticacaoService _autenticacaoService;
@inject AutenticacaoService _service
@inject NavigationManager _nav

<PageTitle>Cadastrar</PageTitle>
<div class="row">
    <div class="col-md-4">
        <section>
            <EditForm Model="@Input" OnValidSubmit="@OnPostAsync" FormName="registerForm" 
                class="d-flex flex-column align-items-center">
                <DataAnnotationsValidator />
                <ValidationSummary/>
                <h4>Use a local account to log in.</h4>
                <hr />
                <div class="form-group w-100 mb-4">
                    <label class="w-100">
                        Email
                        <InputText class="form-control" type="email" @bind-Value="Input!.Email"/>
                    </label>
                </div>
                <div class="form-group w-100 mb-4">
                    <label class="w-100">
                        Senha
                        <InputText class="form-control" type="password" @bind-Value="Input!.Password" />
                    </label>
                    
                </div>
                <div class="form-group w-100 mb-4">
                    <label class="w-100">
                        Confirmar Senha
                        <InputText class="form-control" type="password" @bind-Value="Input!.ConfirmPassword" />
                    </label>
                    
                </div>
                <div class="form-group mb-3">
                    <button type="submit" class="btn btn-default btn-primary py-2 px-5 ">
                        <span class="m-5">Cadastrar</span>
                    </button>
                </div>
            </EditForm>
        </section>
    </div>
    <div class="col-md-6 col-md-offset-2">
        <section>
            <div class="w-100 mt-3">
                @for (int i = 0; i < Errors.Count; i++)
                {
                    <span class="text-danger h3">
                        * @Errors[i]
                    </span>
                }
            </div>
        </section>
    </div>
</div>

@code {
    [Parameter]
    public string? ReturnUrl { get; set; } = "/";

    [SupplyParameterFromForm]
    public RegistrarUsuarioViewModel? Input { get; set; }

    public IList<AuthenticationScheme> ExternalLogins { get; set; }

    private List<string> Errors;

    protected override async Task OnInitializedAsync()
    {
        Input = new();
        Errors = new();

        ExternalLogins = (await _signInManager.GetExternalAuthenticationSchemesAsync()).ToList();
    }

    public async Task OnPostAsync()
    {
        ExternalLogins = (await _signInManager.GetExternalAuthenticationSchemesAsync()).ToList();

        var result = await _autenticacaoService.RegistrarNovoUsuario(Input);
        if (await result.IsValid())
        {
            _nav.NavigateTo(ReturnUrl ?? "/");
        }
        else
            if (await result.Contains("Usuario temporariamente bloqueado por tentativas invalidas"))
            _nav.NavigateTo("./Lockout");
        else
        {
            Errors.Add(await result.ObterPrimeiroErro());
        }        
    }
}
