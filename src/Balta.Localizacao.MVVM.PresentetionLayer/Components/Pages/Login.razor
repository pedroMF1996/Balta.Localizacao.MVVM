@page "/Login"
@page "/Login/{ReturnUrl}"

@inject SignInManager<IdentityUser> _signInManager;
@inject AutenticacaoService _autenticacaoService;
@inject AutenticacaoService _service
@inject NavigationManager _nav

<PageTitle>Login</PageTitle>
<div class="row">
    <div class="col-md-4">
        <section>
            <form id="account" method="post">
                <h4>Use a local account to log in.</h4>
                <hr />
                <div asp-validation-summary="All" class="text-danger"></div>
                <div class="form-group">
                    <label asp-for="Input.Email"></label>
                    <input asp-for="Input.Email" class="form-control" />
                    <span asp-validation-for="Input.Email" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <label asp-for="Input.Password"></label>
                    <input asp-for="Input.Password" class="form-control" />
                    <span asp-validation-for="Input.Password" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <button type="submit" class="btn btn-default">Log in</button>
                </div>
                <div class="form-group">
                    <p>
                        <a asp-page="./Register" asp-route-returnUrl="@ReturnUrl">Criar conta</a>
                    </p>
                </div>
            </form>
        </section>
    </div>
    <div class="col-md-6 col-md-offset-2">
        <section>
            <h4>Use another service to log in.</h4>
            <hr />
            @{
                if ((ExternalLogins?.Count ?? 0) == 0)
                {
                    <div>
                        <p>
                            There are no external authentication services configured. See <a href="https://go.microsoft.com/fwlink/?LinkID=532715">this article</a>
                            for details on setting up this ASP.NET application to support logging in via external services.
                        </p>
                    </div>
                }
                else
                {
                    <form id="external-account" asp-page="./ExternalLogin" asp-route-returnUrl="@ReturnUrl" method="post" class="form-horizontal">
                        <div>
                            <p>
                                @foreach (var provider in ExternalLogins)
                                {
                                    <button type="submit" class="btn btn-default" name="provider" value="@provider.Name" title="Log in using your @provider.DisplayName account">@provider.DisplayName</button>
                                }
                            </p>
                        </div>
                    </form>
                }
            }
        </section>
    </div>
</div>

@code {
    [Parameter]
    public string? ReturnUrl { get; set; } = "/";

    [Parameter]
    public string ErrorMessage { get; set; }

    [CascadingParameter]
    private HttpContext HttpContext { get; set; }

    public LoginViewModel Input { get; set; }

    public IList<AuthenticationScheme> ExternalLogins { get; set; }

    private List<string> Errors;

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(ErrorMessage))
        {
            Errors.Add(ErrorMessage);
        }

        await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);

        ExternalLogins = (await _signInManager.GetExternalAuthenticationSchemesAsync()).ToList();
    }

    public async Task OnPostAsync()
    {
        ExternalLogins = (await _signInManager.GetExternalAuthenticationSchemesAsync()).ToList();

        if (Input.EhValido())
        {
            var result = await _autenticacaoService.RealizarLogin(Input);
            if (await result.IsValid())
            {
                _nav.NavigateTo(ReturnUrl);
            }
            else
                if (await result.Contains("Usuario temporariamente bloqueado por tentativas invalidas"))
                _nav.NavigateTo("./Lockout");
            else
            {
                Errors.Add(await result.ObterPrimeiroErro());
            }
        };
    }
}
